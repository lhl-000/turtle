*code folder contains codes of program:
	1.main.c			It is a main function
	2.turtle.c  turtle.h		they contains relevent functions and defines of parser and interperter
	3.stack.c stack.h 		copy from ADT in this course's github
	4.neillsdl2.c neiillsdl2.h	copy from this course's github

*data folder contains turtle lanuages to test this program

*test folder contains a test.c which is a main function and I use this file to test turtle lanuages in the data folder and also assert some funtions in turtle.c

*makefile has four instructions
	1.parse	use make parse to generate parser and run ./parse + filename to run 
	2.interp	use make interp to generate interperter and run ./interp + filename to run 
	3.test1	is linked to test.c in test folder I use this to test the parse
	4.test2	is linked to test.c in test folder I use this to test the interperter


My test strategy:
	Firstly, I use assertions in test.c  to test some functions in my turtle.c.
	Secondly, I design some test files in data folder.Test files predicts possible syntax errors. Some of them are right and some of them are wrong. I compare the result of progarm with the ture answer in order to make sure the parser part is right.  
	Thirdly, I compare turtle graphics generated by my interpreter part with the example in the exercise12.3 and than make sure them are same.
